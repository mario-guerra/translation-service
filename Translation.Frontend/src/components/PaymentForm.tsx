// Translation.Frontend/src/components/PaymentForm.tsx
import React, { useState } from 'react';
import apiClient from '../services/apiClient.ts';
import { useNavigate } from 'react-router-dom';
import ErrorDisplay from './ErrorDisplay.tsx';

const PaymentForm: React.FC = () => {
  const [email, setEmail] = useState('');
  const [amount, setAmount] = useState('');
  const [service, setService] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    const makePaymentRequest = async (retryCount = 0) => {
      try {
        const response = await apiClient.path("/payment").post({
          body: {
            userEmail: email,
            amount: Number(amount),
            service: service,
            userId: "", // This will be generated by the server
            synthesizedAudio: false,
          },
        });

        if (response.status === "200") {
          const userId = response.body.userId;
          navigate('/upload', { state: { userId } });
        } else {
          setError(response.body.message);
        }
      } catch (err: any) {
        console.error("Payment error:", err);
        if (retryCount < 3 && err.message.includes("Failed to fetch")) {
          console.log(`Retrying payment request, attempt ${retryCount + 1}`);
          await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));
          return makePaymentRequest(retryCount + 1);
        } else {
          setError("An error occurred during payment processing. Please try again later.");
        }
      } finally {
        setLoading(false);
      }
    };

    await makePaymentRequest();
  };

  return (
    <div className="max-w-md mx-auto p-4">
      <h2 className="text-2xl font-bold mb-4">Payment Information</h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <ErrorDisplay message={error} />
        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="email">Email</label>
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="email"
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="amount">Amount</label>
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="amount"
            type="number"
            placeholder="Enter amount"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            required
          />
        </div>
        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="service">Service</label>
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="service"
            type="text"
            placeholder="Enter service"
            value={service}
            onChange={(e) => setService(e.target.value)}
            required
          />
        </div>
        <button
          type="submit"
          className={`bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
          disabled={loading}
        >
          {loading ? 'Processing...' : 'Pay'}
        </button>
      </form>
    </div>
  );
};

export default PaymentForm;