// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// <auto-generated />

using System;
using System.Net;
using System.Threading.Tasks;
using System.Text.Json;
using System.Text.Json.Serialization;
using Microsoft.AspNetCore.Mvc;
using AudioTranslationService.Models.Service.Models;
using AudioTranslationService.Models.Service;

namespace AudioTranslationService.Models.Service.Controllers
{
    [ApiController]
    public abstract partial class RoutesOperationsControllerBase : ControllerBase
    {

        internal abstract IRoutesOperations RoutesOperationsImpl { get; }

        ///<summary>
        /// Submits a payment using the specified payment method and returns success or
        /// yment failure error.
        ///</summary>
        [HttpPost]
        [Route("/payment")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(PaymentResponse))]
        public virtual async Task<IActionResult> ProcessPayment([FromQuery(Name = "method")] PaymentMethod method, [FromQuery(Name = "callbackUrl")] string callbackUrl, Payment body)
        {
            var result = await RoutesOperationsImpl.ProcessPaymentAsync(method, callbackUrl, body);
            return Ok(result);
        }

        ///<summary>
        /// Uploads audio content using multipart/form-data, returning a success
        /// onse or an invalid file error.
        ///</summary>
        [HttpPost]
        [Route("/upload")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(SuccessResponse))]
        public virtual async Task<IActionResult> UploadAudio([FromHeader(Name = "Content-Type")] string contentType = "multipart/form-data", AudioUpload body)
        {
            var result = await RoutesOperationsImpl.UploadAudioAsync(contentType, body);
            return Ok(result);
        }

        ///<summary>
        /// Downloads a file (artifact) by providing a container and upload ID,
        /// rning the file content as bytes.
        ///</summary>
        [HttpGet]
        [Route("/download")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(byte[]))]
        public virtual async Task<IActionResult> DownloadArtifact([FromQuery(Name = "ContainerName")] string containerName, [FromQuery(Name = "uploadId")] string uploadId)
        {
            var result = await RoutesOperationsImpl.DownloadArtifactAsync(containerName, uploadId);
            return Ok(result);
        }

    }
}
