// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// <auto-generated />

using System;
using System.Net;
using System.Threading.Tasks;
using System.Text.Json;
using System.Text.Json.Serialization;
using Microsoft.AspNetCore.Mvc;
using AudioTranslationService.Models.Service.Models;
using AudioTranslationService.Models.Service;

namespace AudioTranslationService.Models.Service.Controllers
{
    [ApiController]
    public abstract partial class RoutesOperationsControllerBase : ControllerBase
    {

        internal abstract IRoutesOperations RoutesOperationsImpl { get; }


        [HttpPost]
        [Route("/register")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(User))]
        public virtual async Task<IActionResult> Register(User body)
        {
            var result = await RoutesOperationsImpl.RegisterAsync(body);
            return Ok(result);
        }


        [HttpPost]
        [Route("/login")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(string))]
        public virtual async Task<IActionResult> Login(User body)
        {
            var result = await RoutesOperationsImpl.LoginAsync(body);
            return Ok(result);
        }


        [HttpPost]
        [Route("/payment")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(Payment))]
        public virtual async Task<IActionResult> ProcessPayment(Payment body)
        {
            var result = await RoutesOperationsImpl.ProcessPaymentAsync(body);
            return Ok(result);
        }


        [HttpPost]
        [Route("/upload-audio")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(AudioUpload))]
        public virtual async Task<IActionResult> UploadAudio(AudioUpload body)
        {
            var result = await RoutesOperationsImpl.UploadAudioAsync(body);
            return Ok(result);
        }


        [HttpPost]
        [Route("/translate")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(TranslationJob))]
        public virtual async Task<IActionResult> StartTranslation(TranslationJob body)
        {
            var result = await RoutesOperationsImpl.StartTranslationAsync(body);
            return Ok(result);
        }


        [HttpGet]
        [Route("/status/{jobId}")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(TranslationJob))]
        public virtual async Task<IActionResult> CheckStatus(string jobId)
        {
            var result = await RoutesOperationsImpl.CheckStatusAsync(jobId);
            return Ok(result);
        }


        [HttpGet]
        [Route("/download/{jobId}")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(byte[]))]
        public virtual async Task<IActionResult> DownloadArtifact(string jobId)
        {
            var result = await RoutesOperationsImpl.DownloadArtifactAsync(jobId);
            return Ok(result);
        }

    }
}
