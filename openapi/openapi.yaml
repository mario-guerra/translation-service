openapi: 3.0.0
info:
  title: Audio Translation Service
  version: 0.0.0
tags: []
paths:
  /download/{jobId}:
    get:
      operationId: Routes_downloadArtifact
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: string
                format: byte
  /job/{jobId}:
    delete:
      operationId: Operations_cancelJob
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: string
  /jobs:
    get:
      operationId: Operations_listJobs
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Models.TranslationJob'
  /login:
    post:
      operationId: Routes_login
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.User'
  /notifications:
    post:
      operationId: Notifications_manageNotifications
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.NotificationPreferences'
  /payment:
    post:
      operationId: Routes_processPayment
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Payment'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.Payment'
  /register:
    post:
      operationId: Routes_register
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.User'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.User'
  /status/{jobId}:
    get:
      operationId: Routes_checkStatus
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.TranslationJob'
  /translate:
    post:
      operationId: Routes_startTranslation
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.TranslationJob'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.TranslationJob'
  /upload-audio:
    post:
      operationId: Routes_uploadAudio
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AudioUpload'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.AudioUpload'
  /upload/{uploadId}:
    get:
      operationId: Operations_getUploadDetails
      parameters:
        - name: uploadId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AudioUpload'
    delete:
      operationId: Operations_deleteUpload
      parameters:
        - name: uploadId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: string
  /user/profile:
    get:
      operationId: Operations_getUserProfile
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.User'
    put:
      operationId: Operations_updateUserProfile
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.User'
components:
  schemas:
    Errors.ErrorResponse:
      type: object
      required:
        - errorCode
        - errorMessage
      properties:
        errorCode:
          type: string
        errorMessage:
          type: string
    Errors.InvalidFileError:
      type: object
      required:
        - errorCode
        - errorMessage
      properties:
        errorCode:
          type: string
          enum:
            - INVALID_FILE
        errorMessage:
          type: string
          enum:
            - The uploaded file is invalid.
      allOf:
        - $ref: '#/components/schemas/Errors.ErrorResponse'
    Errors.PaymentFailureError:
      type: object
      required:
        - errorCode
        - errorMessage
      properties:
        errorCode:
          type: string
          enum:
            - PAYMENT_FAILURE
        errorMessage:
          type: string
          enum:
            - Payment processing failed.
      allOf:
        - $ref: '#/components/schemas/Errors.ErrorResponse'
    Models.AudioUpload:
      type: object
      required:
        - uploadId
        - fileName
        - fileSize
        - uploadDate
      properties:
        uploadId:
          type: string
        fileName:
          type: string
        fileSize:
          type: number
          format: float
        uploadDate:
          type: string
    Models.NotificationPreferences:
      type: object
      required:
        - userId
        - emailNotifications
      properties:
        userId:
          type: string
        emailNotifications:
          type: boolean
    Models.Payment:
      type: object
      required:
        - paymentId
        - userId
        - amount
        - languageOptions
        - service
      properties:
        paymentId:
          type: string
        userId:
          type: string
        amount:
          type: number
          format: float
        languageOptions:
          type: array
          items:
            type: string
        service:
          type: string
    Models.TranslationJob:
      type: object
      required:
        - jobId
        - uploadId
        - status
        - progress
        - createdAt
      properties:
        jobId:
          type: string
        uploadId:
          type: string
        status:
          type: string
        progress:
          type: number
          format: float
        createdAt:
          type: string
    Models.User:
      type: object
      required:
        - userId
        - name
        - email
        - password
      properties:
        userId:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
    Security.InputValidation:
      type: object
      required:
        - rules
      properties:
        rules:
          type: array
          items:
            type: string
    Security.RateLimiting:
      type: object
      required:
        - limit
        - window
      properties:
        limit:
          type: integer
          format: int32
        window:
          type: string
    Security.SecureStorage:
      type: object
      required:
        - encryption
      properties:
        encryption:
          type: string
