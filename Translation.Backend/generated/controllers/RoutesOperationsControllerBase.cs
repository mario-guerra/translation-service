// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// <auto-generated />

using System;
using System.Net;
using System.Threading.Tasks;
using System.Text.Json;
using System.Text.Json.Serialization;
using Microsoft.AspNetCore.Mvc;
using AudioTranslationService.Models.Service.Models;
using AudioTranslationService.Models.Service;

namespace AudioTranslationService.Models.Service.Controllers
{
    [ApiController]
    public abstract partial class RoutesOperationsControllerBase : ControllerBase
    {

        internal abstract IRoutesOperations RoutesOperationsImpl { get; }

        [HttpPost]
        [Route("/payment")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(PaymentResponse))]
        public virtual async Task<IActionResult> ProcessPayment(Payment body)
        {
            var result = await RoutesOperationsImpl.ProcessPaymentAsync(body);
            return Ok(result);
        }


        [HttpPost]
        [Route("/upload")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(SuccessResponse))]
        public virtual async Task<IActionResult> UploadAudio([FromForm] IFormFile file, [FromForm] string userId, [FromForm] string langIn, [FromForm] string langOut)
        {
            if (file == null || file.Length == 0)
            {
                return BadRequest("No file uploaded.");
            }

            if (userId == null)
            {
                return BadRequest("No user ID provided.");
            }

            if (langIn == null)
            {
                return BadRequest("No input language provided.");
            }

            if (langOut == null)
            {
                return BadRequest("No output language provided.");
            }

            using (var memoryStream = new MemoryStream())
            {
                await file.CopyToAsync(memoryStream);
                var audioUpload = new AudioUpload
                {
                    File = memoryStream.ToArray(),
                    LangIn = langIn,
                    LangOut = langOut,
                    UserId = userId
                };

                var result = await RoutesOperationsImpl.UploadAudioAsync(audioUpload);
                return Ok(result);
            }
        }
        [HttpGet] // Change to HttpGet to accept GET requests
        [Route("/download/")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(byte[]))]
        public virtual async Task<IActionResult> DownloadZipArtifact([FromQuery] string containerName, [FromQuery] string uploadId)
        {
            var zipFileName = $"{uploadId}-artifacts.zip";
            var result = await RoutesOperationsImpl.DownloadArtifactAsync(containerName, uploadId);
            return File(result, "application/zip", zipFileName);
        }
    }
}
